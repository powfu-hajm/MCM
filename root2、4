# -*- coding: utf-8 -*-
"""
Created on Sat Jan 25 10:39:39 2025

@author: wujia
"""
# w1权重变化下遗传结果（x,y) Z以及3个重要参数的变化 
import numpy as np
import matplotlib.pyplot as plt
from deap import base, creator, tools, algorithms

# 定义模型参数
V_max = 20000
C_limit = 5000
S_min = 50
R = 150
alpha, beta = 0.1, 0.00001
gamma, delta = 0.05, 0.00001
S_0, eta, zeta = 100, 10, 0.001

# 定义模型函数
def revenue(V):
    return V * R

def carbon_footprint(V):
    return alpha * V + beta * V**2

def infrastructure_load(V):
    return gamma * V + delta * V**2

def resident_satisfaction(V):
    return S_0 + eta * np.log(1 + V) - zeta * V

def objective_function(V, w1, w2, w3, w4):
    I = infrastructure_load(V)
    C = carbon_footprint(V)
    F = infrastructure_load(V)
    S = resident_satisfaction(V)
    return (w1 * (revenue(V) / (V_max * R)) -
            w2 * (C / C_limit) -
            w3 * (F / infrastructure_load(V_max)) +
            w4 * (S / S_0))

# 遗传算法实现
creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", list, fitness=creator.FitnessMax)

toolbox = base.Toolbox()
toolbox.register("attr_float", np.random.uniform, 0.5 * V_max, V_max)
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float, n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("evaluate", lambda ind: (objective_function(ind[0], *weights),))
toolbox.register("mate", tools.cxBlend, alpha=0.5)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1000, indpb=0.3)
toolbox.register("select", tools.selTournament, tournsize=3)

# 权重敏感性分析
w1_values = np.linspace(0.1, 0.9, 50)
results = {"w1": w1_values, "Z": [], "R": [], "I": [], "E": [], "S": []}

for w1 in w1_values:
    w2 = 0.25
    w3 = 0.2
    w4 = 0.2  # w1, w2, w3, w4 = 0.35, 0.25, 0.2, 0.2
    weights = (w1, w2, w3, w4)
    pop = toolbox.population(n=100)
    N = 50
    for gen in range(N):
        offspring = algorithms.varAnd(pop, toolbox, cxpb=0.8, mutpb=0.3)
        fits = list(map(toolbox.evaluate, offspring))
        for fit, ind in zip(fits, offspring):
            ind.fitness.values = fit
        pop = toolbox.select(offspring, k=len(pop))
    best_ind = tools.selBest(pop, k=1)[0]
    results["Z"].append(best_ind.fitness.values[0])
    results["R"].append(revenue(best_ind[0]))
    results["I"].append(infrastructure_load(best_ind[0]))
    results["E"].append(carbon_footprint(best_ind[0]))
    results["S"].append(resident_satisfaction(best_ind[0]))

# 绘制结果
fig, axs = plt.subplots(2, 3, figsize=(18, 12))
fig.suptitle('Sensitivity Analysis of Weights', fontsize=16)

axs[0, 0].plot(results["w1"], results["Z"], marker='o', color='blue')
axs[0, 0].set_title('Objective Function Z')
axs[0, 0].set_xlabel('Weight $w_1$')
axs[0, 0].set_ylabel('Z')

axs[0, 1].plot(results["w1"], results["R"], marker='o', color='green')
axs[0, 1].set_title('Revenue R')
axs[0, 1].set_xlabel('Weight $w_1$')
axs[0, 1].set_ylabel('R')

axs[0, 2].plot(results["w1"], results["I"], marker='o', color='red')
axs[0, 2].set_title('Infrastructure Load I')
axs[0, 2].set_xlabel('Weight $w_1$')
axs[0, 2].set_ylabel('I')

axs[1, 0].plot(results["w1"], results["E"], marker='o', color='cyan')
axs[1, 0].set_title('Carbon Footprint E')
axs[1, 0].set_xlabel('Weight $w_1$')
axs[1, 0].set_ylabel('E')

axs[1, 1].plot(results["w1"], results["S"], marker='o', color='magenta')
axs[1, 1].set_title('Resident Satisfaction S')
axs[1, 1].set_xlabel('Weight $w_1$')
axs[1, 1].set_ylabel('S')

axs[1, 2].plot(results["w1"], results["w1"], marker='o', color='yellow')
axs[1, 2].set_title('Weight $w_1$')
axs[1, 2].set_xlabel('Weight $w_1$')
axs[1, 2].set_ylabel('$w_1$')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

？？？？？？？？？？part2
# w2、w3、w4的敏感性分析
import numpy as np
import matplotlib.pyplot as plt
from deap import base, creator, tools, algorithms

# 定义模型参数
V_max = 20000
C_limit = 5000
S_min = 50
R = 150
alpha, beta = 0.1, 0.00001
gamma, delta = 0.05, 0.00001
S_0, eta, zeta = 100, 10, 0.001

# 定义模型函数
def revenue(V):
    return V * R

def carbon_footprint(V):
    return alpha * V + beta * V**2

def infrastructure_load(V):
    return gamma * V + delta * V**2

def resident_satisfaction(V):
    return S_0 + eta * np.log(1 + V) - zeta * V

def objective_function(V, w1, w2, w3, w4):
    I = infrastructure_load(V)
    C = carbon_footprint(V)
    F = infrastructure_load(V)
    S = resident_satisfaction(V)
    return (w1 * (revenue(V) / (V_max * R)) -
            w2 * (C / C_limit) -
            w3 * (F / infrastructure_load(V_max)) +
            w4 * (S / S_0))

# 遗传算法实现
creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", list, fitness=creator.FitnessMax)

toolbox = base.Toolbox()
toolbox.register("attr_float", np.random.uniform, 0.5 * V_max, V_max)
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float, n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("evaluate", lambda ind: (objective_function(ind[0], *weights),))
toolbox.register("mate", tools.cxBlend, alpha=0.5)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1000, indpb=0.3)
toolbox.register("select", tools.selTournament, tournsize=3)

# 权重敏感性分析
initial_weights = (0.35, 0.25, 0.2, 0.2)

# 分析w2的敏感性
w2_values = np.linspace(0.1, 0.9, 50)
results_w2 = {"w2": w2_values, "Z": [], "R": [], "I": [], "E": [], "S": []}
w1, w3, w4 = initial_weights[:1] + initial_weights[2:]

for w2 in w2_values:
    weights = (w1, w2, w3, w4)
    pop = toolbox.population(n=100)
    N = 50
    for gen in range(N):
        offspring = algorithms.varAnd(pop, toolbox, cxpb=0.8, mutpb=0.3)
        fits = list(map(toolbox.evaluate, offspring))
        for fit, ind in zip(fits, offspring):
            ind.fitness.values = fit
        pop = toolbox.select(offspring, k=len(pop))
    best_ind = tools.selBest(pop, k=1)[0]
    results_w2["Z"].append(best_ind.fitness.values[0])
    results_w2["R"].append(revenue(best_ind[0]))
    results_w2["I"].append(infrastructure_load(best_ind[0]))
    results_w2["E"].append(carbon_footprint(best_ind[0]))
    results_w2["S"].append(resident_satisfaction(best_ind[0]))

# 绘制w2的结果
fig_w2, axs_w2 = plt.subplots(2, 3, figsize=(18, 12))
fig_w2.suptitle(f'Sensitivity Analysis of Weight $w_2$', fontsize=16)

axs_w2[0, 0].plot(results_w2["w2"], results_w2["Z"], marker='o', color='blue')
axs_w2[0, 0].set_title('Objective Function Z')
axs_w2[0, 0].set_xlabel('Weight $w_2$')
axs_w2[0, 0].set_ylabel('Z')

axs_w2[0, 1].plot(results_w2["w2"], results_w2["R"], marker='o', color='green')
axs_w2[0, 1].set_title('Revenue R')
axs_w2[0, 1].set_xlabel('Weight $w_2$')
axs_w2[0, 1].set_ylabel('R')

axs_w2[0, 2].plot(results_w2["w2"], results_w2["I"], marker='o', color='red')
axs_w2[0, 2].set_title('Infrastructure Load I')
axs_w2[0, 2].set_xlabel('Weight $w_2$')
axs_w2[0, 2].set_ylabel('I')

axs_w2[1, 0].plot(results_w2["w2"], results_w2["E"], marker='o', color='cyan')
axs_w2[1, 0].set_title('Carbon Footprint E')
axs_w2[1, 0].set_xlabel('Weight $w_2$')
axs_w2[1, 0].set_ylabel('E')

axs_w2[1, 1].plot(results_w2["w2"], results_w2["S"], marker='o', color='magenta')
axs_w2[1, 1].set_title('Resident Satisfaction S')
axs_w2[1, 1].set_xlabel('Weight $w_2$')
axs_w2[1, 1].set_ylabel('S')

axs_w2[1, 2].plot(results_w2["w2"], results_w2["w2"], marker='o', color='yellow')
axs_w2[1, 2].set_title('Weight $w_2$')
axs_w2[1, 2].set_xlabel('Weight $w_2$')
axs_w2[1, 2].set_ylabel('$w_2$')
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

# 分析w3的敏感性
w3_values = np.linspace(0.1, 0.9, 50)
results_w3 = {"w3": w3_values, "Z": [], "R": [], "I": [], "E": [], "S": []}
w1, w2, w4 = initial_weights[:2] + initial_weights[3:]

for w3 in w3_values:
    weights = (w1, w2, w3, w4)
    pop = toolbox.population(n=100)
    N = 50
    for gen in range(N):
        offspring = algorithms.varAnd(pop, toolbox, cxpb=0.8, mutpb=0.3)
        fits = list(map(toolbox.evaluate, offspring))
        for fit, ind in zip(fits, offspring):
            ind.fitness.values = fit
        pop = toolbox.select(offspring, k=len(pop))
    best_ind = tools.selBest(pop, k=1)[0]
    results_w3["Z"].append(best_ind.fitness.values[0])
    results_w3["R"].append(revenue(best_ind[0]))
    results_w3["I"].append(infrastructure_load(best_ind[0]))
    results_w3["E"].append(carbon_footprint(best_ind[0]))
    results_w3["S"].append(resident_satisfaction(best_ind[0]))

# 绘制w3的结果
fig_w3, axs_w3 = plt.subplots(2, 3, figsize=(18, 12))
fig_w3.suptitle(f'Sensitivity Analysis of Weight $w_3$', fontsize=16)

axs_w3[0, 0].plot(results_w3["w3"], results_w3["Z"], marker='o', color='blue')
axs_w3[0, 0].set_title('Objective Function Z')
axs_w3[0, 0].set_xlabel('Weight $w_3$')
axs_w3[0, 0].set_ylabel('Z')

axs_w3[0, 1].plot(results_w3["w3"], results_w3["R"], marker='o', color='green')
axs_w3[0, 1].set_title('Revenue R')
axs_w3[0, 1].set_xlabel('Weight $w_3$')
axs_w3[0, 1].set_ylabel('R')

axs_w3[0, 2].plot(results_w3["w3"], results_w3["I"], marker='o', color='red')
axs_w3[0, 2].set_title('Infrastructure Load I')
axs_w3[0, 2].set_xlabel('Weight $w_3$')
axs_w3[0, 2].set_ylabel('I')

axs_w3[1, 0].plot(results_w3["w3"], results_w3["E"], marker='o', color='cyan')
axs_w3[1, 0].set_title('Carbon Footprint E')
axs_w3[1, 0].set_xlabel('Weight $w_3$')
axs_w3[1, 0].set_ylabel('E')

axs_w3[1, 1].plot(results_w3["w3"], results_w3["S"], marker='o', color='magenta')
axs_w3[1, 1].set_title('Resident Satisfaction S')
axs_w3[1, 1].set_xlabel('Weight $w_3$')
axs_w3[1, 1].set_ylabel('S')

axs_w3[1, 2].plot(results_w3["w3"], results_w3["w3"], marker='o', color='yellow')
axs_w3[1, 2].set_title('Weight $w_3$')
axs_w3[1, 2].set_xlabel('Weight $w_3$')
axs_w3[1, 2].set_ylabel('$w_3$')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

# 分析w4的敏感性
w4_values = np.linspace(0.1, 0.9, 50)
results_w4 = {"w4": w4_values, "Z": [], "R": [], "I": [], "E": [], "S": []}
w1, w2, w3 = initial_weights[:3]

for w4 in w4_values:
    weights = (w1, w2, w3, w4)
    pop = toolbox.population(n=100)
    N = 50
    for gen in range(N):
        offspring = algorithms.varAnd(pop, toolbox, cxpb=0.8, mutpb=0.3)
        fits = list(map(toolbox.evaluate, offspring))
        for fit, ind in zip(fits, offspring):
            ind.fitness.values = fit
        pop = toolbox.select(offspring, k=len(pop))
    best_ind = tools.selBest(pop, k=1)[0]
    results_w4["Z"].append(best_ind.fitness.values[0])
    results_w4["R"].append(revenue(best_ind[0]))
    results_w4["I"].append(infrastructure_load(best_ind[0]))
    results_w4["E"].append(carbon_footprint(best_ind[0]))
    results_w4["S"].append(resident_satisfaction(best_ind[0]))

# 绘制w4的结果
fig_w4, axs_w4 = plt.subplots(2, 3, figsize=(18, 12))
fig_w4.suptitle(f'Sensitivity Analysis of Weight $w_4$', fontsize=16)

axs_w4[0, 0].plot(results_w4["w4"], results_w4["Z"], marker='o', color='blue')
axs_w4[0, 0].set_title('Objective Function Z')
axs_w4[0, 0].set_xlabel('Weight $w_4$')
axs_w4[0, 0].set_ylabel('Z')

axs_w4[0, 1].plot(results_w4["w4"], results_w4["R"], marker='o', color='green')
axs_w4[0, 1].set_title('Revenue R')
axs_w4[0, 1].set_xlabel('Weight $w_4$')
axs_w4[0, 1].set_ylabel('R')

axs_w4[0, 2].plot(results_w4["w4"], results_w4["I"], marker='o', color='red')
axs_w4[0, 2].set_title('Infrastructure Load I')
axs_w4[0, 2].set_xlabel('Weight $w_4$')
axs_w4[0, 2].set_ylabel('I')

axs_w4[1, 0].plot(results_w4["w4"], results_w4["E"], marker='o', color='cyan')
axs_w4[1, 0].set_title('Carbon Footprint E')
axs_w4[1, 0].set_xlabel('Weight $w_4$')
axs_w4[1, 0].set_ylabel('E')

axs_w4[1, 1].plot(results_w4["w4"], results_w4["S"], marker='o', color='magenta')
axs_w4[1, 1].set_title('Resident Satisfaction S')
axs_w4[1, 1].set_xlabel('Weight $w_4$')
axs_w4[1, 1].set_ylabel('S')

axs_w4[1, 2].plot(results_w4["w4"], results_w4["w4"], marker='o', color='yellow')
axs_w4[1, 2].set_title('Weight $w_4$')
axs_w4[1, 2].set_xlabel('Weight $w_4$')
axs_w4[1, 2].set_ylabel('$w_4$')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()
